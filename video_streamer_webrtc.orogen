# frozen_string_literal: true

name "video_streamer_webrtc"

using_library "base-logging", typekit: false
using_library "gstreamer-webrtc-1.0", typekit: false
using_library "gstreamer-video-1.0", typekit: false
using_library "gstreamer-app-1.0", typekit: false
using_library "libsoup-2.4", typekit: false
using_library "jsoncpp", typekit: false
import_types_from "base"
import_types_from "video_streamer_webrtcTypes.hpp"

OroGen::Spec::Deployment.register_global_initializer(:gstreamer)
if defined?(OroGen::Gen::RTT_CPP::Deployment)
    OroGen::Gen::RTT_CPP::Deployment.register_global_initializer(
        :gstreamer,
        deployment_cmake: <<~GST_DEPLOYMENT_CMAKE,
            orogen_pkg_check_modules(gstreamer_app_1_0 REQUIRED gstreamer-app-1.0)
            include_directories(${gstreamer_app_1_0_INCLUDE_DIRS})
            add_definitions(${gstreamer_app_1_0_CFLAGS_OTHER})
            link_directories(${gstreamer_app_1_0_LIBRARY_DIRS})
            target_link_libraries(<%= deployer.name %> ${gstreamer_app_1_0_LIBRARIES})
        GST_DEPLOYMENT_CMAKE
        global_scope: <<~GST_TOPLEVEL,
            #include <gst/gst.h>
        GST_TOPLEVEL
        init: <<~GST_INIT,
            gst_init(&argc, &argv);
        GST_INIT
        exit: <<~GST_EXIT
            gst_deinit();
        GST_EXIT
    )
end

task_context "StreamerTask" do
    needs_configuration

    needs_global_initializer :gstreamer

    # The target fps
    property "fps", "int", 25

    # The port on which the embedded server is listening
    property "port", "int", 57_778

    # Transport configuration
    property "transport", "video_streamer_webrtc/Transport"

    # Encoding configuration (defaults to VP8)
    property "encoding", "video_streamer_webrtc/Encoding"

    # STUN server (e.g. stun://10.128.0.1:3478)
    property "stun_server", "string"

    # How long will we keep a stream without receiving a heartbeat from the client
    # on the signalling websocket
    property "dead_receiver_timeout", "/base/Time"

    # The images to stream
    input_port "images", ro_ptr("/base/samples/frame/Frame")

    # Statistics about the streams as received by our clients
    output_port "client_statistics",
                "/std/vector<video_streamer_webrtc/ClientStatistics>"

    port_driven

    exception_states "GSTREAMER_ERROR"
end
